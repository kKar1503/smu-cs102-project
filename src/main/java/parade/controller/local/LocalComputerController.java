package parade.controller.local;

import parade.common.Card;
import parade.common.Player;
import parade.common.state.client.AbstractClientData;
import parade.common.state.client.ClientCardPlayData;
import parade.common.state.server.*;
import parade.computer.IComputerEngine;

/**
 * The LocalComputerController class is a representation of a computer player in the game. It relies
 * on the underlying IComputerEngine to determine the best moves for the player. The controller
 * handles the game state updates and player actions based on the server data received.
 *
 * <p>When prompted to play a card, the computer player will use its attached IComputerEngine
 * internal logic to decide which card to play. The controller will then send the chosen card back
 * to the game server.
 */
public class LocalComputerController implements ILocalPlayerController {
    private final Player player;
    private final IComputerEngine computerEngine;
    private static int index = 1;

    /**
     * Constructs a Computer player with a given name and the computer engine.
     *
     * @param name The name of the AI player.
     * @param computerEngine The computer engine to attach for the controller.
     */
    public LocalComputerController(String name, IComputerEngine computerEngine) {
        this.computerEngine = computerEngine;
        player = new Player(name);
    }

    /**
     * Constructors a Computer player with a computer engine.
     *
     * <p>Name is autogenerated based on the computer engine name and an auto-incremented index.
     *
     * @param computerEngine The computer engine to attach for the controller.
     */
    public LocalComputerController(IComputerEngine computerEngine) {
        this("Computer " + index++ + " [" + computerEngine.getName() + "]", computerEngine);
    }

    /**
     * Processes the server data received from the game server. This method is responsible for
     * updating the player hand and board using the following implementations of {@link
     * AbstractServerData} abstract class:
     *
     * <ul>
     *   <li>{@link ServerPlayerDrawnCardData} - Represents the data for a drawn card.
     *   <li>{@link ServerPlayerReceivedParadeCardsData} - Represents the data for received parade
     *       cards.
     *   <li>{@link ServerGameStartData} - Represents the data for the game start. This contains the
     *       initial cards to be added to the player hand.
     *   <li>{@link ServerPlayerTurnData} - Represents the data for the player turn. This contains
     *       the information required for the computer to act on.
     * </ul>
     *
     * @param serverData an {@link AbstractServerData} object which contains information for the
     *     player to act.
     * @return null for both the {@link AbstractServerData} subclasses that this method handles.
     * @throws UnsupportedOperationException if the server data is not of the expected type.
     */
    public AbstractClientData send(AbstractServerData serverData)
            throws UnsupportedOperationException {
        return switch (serverData) {
            case ServerGameStartData gameStartData -> addToPlayerHand(gameStartData.getCards());
            case ServerPlayerDrawnCardData playerDrawnCardData ->
                    addToPlayerHand(playerDrawnCardData.getCard());
            case ServerPlayerReceivedParadeCardsData playerReceivedParadeCardsData ->
                    addToPlayerBoard(playerReceivedParadeCardsData.getParadeCards());
            case ServerPlayerTurnData playerTurnData ->
                    new ClientCardPlayData(
                            player,
                            computerEngine.process(
                                    player,
                                    playerTurnData.getPlayers(),
                                    playerTurnData.getParade(),
                                    playerTurnData.getDeckSize()));
            default -> throw new UnsupportedOperationException("Unexpected value: " + serverData);
        };
    }

    /**
     * Adds the drawn card to the player's hand.
     *
     * @param cards The array of cards sent from the server that are drawn to the hand.
     * @return null since this player action does not expect player to do any action
     */
    protected AbstractClientData addToPlayerHand(Card... cards) {
        player.addToBoard(cards);
        return null;
    }

    /**
     * Adds the drawn card to the player's board.
     *
     * @param cards The array of parade cards sent from the server that are drawn from the parade
     *     upon placing down the card.
     * @return null since this player action does not expect player to do any action
     */
    private AbstractClientData addToPlayerBoard(Card... cards) {
        player.addToBoard(cards);
        return null;
    }

    @Override
    public Player getPlayer() {
        return player;
    }
}
